#
# Copyright (C) 2024 nota inc. All rights reserved.
# This source code is the property of nota inc. and is protected by copyright law. THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY TRANSFER OF OWNERSHIP, COPYRIGHT OR ANY RIGHTS INCLUDING BUT NOT LIMITED TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
# Unauthorized disclosure, reproduction, modification, distribution, or commercial use of all or any part of this source code without prior written consent from Nota Inc. is strictly prohibited.
# This source code is provided "as is" and without any warranty, express or implied.
# Nota Inc. shall not be liable for any damages arising from the use of this source code.
# For inquiries regarding the use of this source code, please contact Nota Inc. at:
# Email: contact@nota.ai
#
name: 'CD'

on:
  push:
    branches:
      - develop
    # tags:
    #   - v*

jobs:
  CD:
    name: 'CD'

    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: true
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    permissions:
      contents: write
    strategy:
      # max-parallel: 1
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          # - platform: 'macos-latest' # for Intel based macs.
          #   args: '--target x86_64-apple-darwin'
          # - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
          #   args: ''
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: install gstreamer (macos)
        if: matrix.platform == 'macos-latest'
        run: |
          curl -L https://gstreamer.freedesktop.org/data/pkg/osx/1.24.8/gstreamer-1.0-1.24.8-universal.pkg -o gstreamer-runtime.pkg
          sudo installer -pkg gstreamer-runtime.pkg -target /
          curl -L https://gstreamer.freedesktop.org/data/pkg/osx/1.24.8/gstreamer-1.0-devel-1.24.8-universal.pkg -o gstreamer-devel.pkg
          sudo installer -pkg gstreamer-devel.pkg -target /

      - name: config gstreamer (macos)
        if: matrix.platform == 'macos-latest'
        run: |
          dir_path=$(find / -name "gst-launch-1.0" -print -quit | xargs dirname)
          dir_path=$(echo "$dir_path" | sed 's|/bin$||')
          echo "GSTREAMER_DIR=$dir_path" >> $GITHUB_ENV
          echo "Found directory: $dir_path"
          cp -r $dir_path src-tauri/assets
          ls src-tauri/assets
          sed -i '' 's/"bundle": {/"bundle": {\n      "resources": ["assets"],/' src-tauri/tauri.conf.json
          cat src-tauri/tauri.conf.json

      - name: install gstreamer (windows)
        if: matrix.platform == 'windows-latest'
        run: |
          curl -L https://gstreamer.freedesktop.org/data/pkg/windows/1.24.8/msvc/gstreamer-1.0-msvc-x86_64-1.24.8.msi -o C:\\gstreamer-runtime.msi
          msiexec /i C:\\gstreamer-runtime.msi INSTALLLEVEL=100 /quiet /norestart
          curl -L https://gstreamer.freedesktop.org/data/pkg/windows/1.24.8/msvc/gstreamer-1.0-devel-msvc-x86_64-1.24.8.msi -o C:\\gstreamer-devel.msi
          msiexec /i C:\\gstreamer-devel.msi INSTALLLEVEL=100 /quiet /norestart

      # - name: config gstreamer (windows)
      #   if: matrix.platform == 'windows-latest'
      #   shell: bash
      #   run: |
      #     dir_path=$(find \\ -name "gst-launch-1.0.exe" -print -quit | xargs dirname)
      #     dir_path=$(echo "$dir_path" | sed 's|/bin$||')
      #     echo "GSTREAMER_DIR=$dir_path" >> $GITHUB_ENV
      #     echo "Found directory: $dir_path"
      #     cp -r $dir_path src-tauri\\assets
      #     ls src-tauri\\assets
      #     sed -i 's/"bundle": {/"bundle": {\n      "resources": ["assets"],/' src-tauri\\tauri.conf.json
      #     cat src-tauri\\tauri.conf.json

      - name: config gstreamer (windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          $drives = Get-PSDrive -PSProvider FileSystem
          $foundFile = $null
          foreach ($drive in $drives) {
              $foundFile = Get-ChildItem -Path "$($drive.Name):\\" -Include "gst-launch-1.0.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($foundFile) {
                  break
              }
          }
          if ($foundFile) {
              $dir_path = $foundFile.DirectoryName
              echo "GSTREAMER_DIR=$dir_path" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              echo "Found directory: $dir_path"
              ls $dir_path\\..
          } else {
              echo "File not found"
          }
      #     # cp -r D:\\gstreamer\\1.0\\msvc_x86_64 src-tauri\\assets
      #     # sed -i 's/"bundle": {/"bundle": {\n      "resources": ["assets"],/' src-tauri\\tauri.conf.json
      #     # cat src-tauri\\tauri.conf.json

      # - name: setup node
      #   uses: actions/setup-node@master
      #   with:
      #     node-version: 18.x

      # - name: install Rust stable
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # - name: Rust cache
      #   uses: swatinem/rust-cache@v2
      #   with:
      #     workspaces: './src-tauri -> target'

      # - name: Install frontend dependencies
      #   run: yarn install --network-timeout 100000

      # - name: Cache Yarn dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/yarn
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-

      # - name: build
      #   run: yarn tauri build

      # - name: tag version (macos)
      #   if: matrix.platform == 'macos-latest'
      #   run: |
      #     cd src-tauri/target/release/bundle/dmg
      #     mv test\ tauri\ dev\ tools_0.0.1_aarch64.dmg test\ tauri\ dev\ tools_$(echo ${GITHUB_REF_NAME} | cut -d_ -f 2).dmg
      #     ls

      # - name: tag version (windows)
      #   if: matrix.platform == 'windows-latest'
      #   shell: cmd
      #   run: |
      #     cd src-tauri/target/release/bundle/msi
      #     rename test\ tauri\ dev\ tools_0.0.1_x64_en-US.msi test\ tauri\ dev\ tools_$(echo ${GITHUB_REF_NAME} | cut -d_ -f 2)_x64_en-US.msi
      #     ls

      # - name: release (macos)
      #   uses: ncipollo/release-action@v1
      #   if: matrix.platform == 'macos-latest'
      #   with:
      #     name: develop
      #     commit: develop
      #     allowUpdates: true
      #     artifacts: 'src-tauri/target/release/bundle/dmg/test tauri dev tools*.dmg'

      # - name: release (windows)
      #   uses: ncipollo/release-action@v1
      #   if: matrix.platform == 'windows-latest'
      #   with:
      #     name: develop
      #     commit: develop
      #     allowUpdates: true
      #     artifacts: 'src-tauri/target/release/bundle/msi/test tauri dev tools*.msi'
